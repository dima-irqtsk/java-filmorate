package ru.yandex.practicum.filmorate.storage.dao.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.model.User;
import ru.yandex.practicum.filmorate.storage.UserStorage;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import static ru.yandex.practicum.filmorate.model.FilmorateRowMapper.USER_ROW_MAPPER;

@RequiredArgsConstructor
@Repository("userDbStorage")
public class UserDbStorage implements UserStorage {

    private final JdbcTemplate jdbcTemplate;
    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @Override
    public User save(User user) {
        String sqlQuery;
        if (user.getId() == 0) {
            sqlQuery = "INSERT INTO users (login, email, name, birthday) " +
                    " VALUES (:login, :email, :name, :birthday)";
        } else {
            sqlQuery = "UPDATE users SET login = :login, email = :email, name = :name, birthday = :birthday " +
                    "WHERE user_id = :id";
        }
        var userParams = new BeanPropertySqlParameterSource(user);
        var keyHolder = new GeneratedKeyHolder();
        namedParameterJdbcTemplate.update(sqlQuery, userParams, keyHolder);
        if (user.getId() == 0) {
            long autoGeneratedKey = Objects.requireNonNull(keyHolder.getKey()).longValue();
            user.setId(autoGeneratedKey);
        }
        return user;
    }

    @Override
    public Optional<User> findById(long id) {
        var sqlQuery = "SELECT user_id, login, email, name, birthday FROM users WHERE user_id = ?";
        try {
            return Optional.ofNullable(jdbcTemplate.queryForObject(sqlQuery, USER_ROW_MAPPER, id));
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<User> getAll() {
        var sqlQuery = "SELECT user_id, login, email, name, birthday FROM users ORDER BY user_id";
        return jdbcTemplate.query(sqlQuery, USER_ROW_MAPPER);
    }

    @Override
    public List<User> getAllById(Collection<Long> ids) {
        var sqlQuery = "SELECT user_id, login, email, name, birthday FROM users WHERE user_id IN (:ids)";
        var idsParams = new MapSqlParameterSource("ids", ids);
        return namedParameterJdbcTemplate.query(sqlQuery, idsParams, USER_ROW_MAPPER);
    }

    @Override
    public void deleteById(long id) {
        var sqlQuery = "DELETE FROM users WHERE user_id = ?";
        jdbcTemplate.update(sqlQuery, id);
    }

    @Override
    public void deleteAllById(Collection<Long> ids) {
        var sqlQuery = "DELETE FROM users WHERE user_id IN (:ids)";
        var idsParams = new MapSqlParameterSource("ids", ids);
        namedParameterJdbcTemplate.update(sqlQuery, idsParams);
    }

    @Override
    public void deleteAll() {
        var sqlQuery = "DELETE FROM users";
        jdbcTemplate.update(sqlQuery);
    }

    @Override
    public boolean existsById(long id) {
        return findById(id).isPresent();
    }
}